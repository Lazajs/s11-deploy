openapi: 3.0.0
info:
  title: Express API
  version: 1.0.0

tags:
  - name: Auth

components:

  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: session
  schemas:
    Barrio:
      type: string
      enum:
        - Palermo
        - Belgrano
        - Recoleta
        - San Telmo
        - La Boca
        - San Cristóbal
        - Almagro
        - Caballito
        - Flores
        - Villa Crespo
        - Boedo
        - Villa Urquiza
        - Villa Devoto
        - Saavedra
        - Mataderos
        - Nuñez
        - Barracas
        - Parque Patricios
        - Villa del Parque
        - Villa Lugano
        - Villa Riachuelo
        - Villa Soldati
        - Pompeya
        - Colegiales
        - Agronomía
        - Villa Ortúzar
        - Parque Chacabuco
        - Parque Avellaneda
        - Monte Castro
        - Parque Chas
        - Nueva Pompeya
        - Villa Santa Rita
        - Villa General Mitre
        - Coghlan
        - Villa Pueyrredón
    Category:
      type: string
      enum:
        - Gastronómicos
        - Culturales
        - Deportivos
        - Educativos
        - Sociales y de entretenimiento
        - Beneficios y causas benéficas
        - Familiares y niños
        - Moda y belleza
        - Conferencias y convenciones
    EventType:
      type: string
      enum:
        - Interior
        - Exterior
        - Virtual
    Event:
      type: object
      properties:
        _id: 
          type: string
          example: '5f9e2b3b9d9d9d9d9d9d9d9d'
        imgUrls:
          type: array
          items:
            type: string
        title:
          type: string
          example: 'Event title'
        description:
          type: string
          example: 'Event description'
        reviews: 
          type: array
          items:
            type: string
        people:
          type: array
          items:
            type: string
        creator:
          type: string
          example: '5f9e2b3b9d9d9d9d9d9d9d9d'
        schedule:
          type: number
          example: 12
        duration:
          type: number
          example: 2
        category:
          type: string
          example: Culturales
        price:
          type: number
          example: 12
        link: 
          type: string
          example: 'https://www.google.com/'
        minAge:
          type: number
          example: 12
        type: 
          type: string
          example: 'Virtual'
        days: 
          type: array
          items:
            type: string
            example: ['2004-12-20', '2004-12-21']
        place:
          type: string
          example: 'Boedo'
        faqs:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                example: 'Some question?'
              answer:
                type: string
                example: 'Some answer.'
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        name:
          type: string
          minLength: 4
          example: 'JohnDoe'
        nextEvents:
          type: array
          items:
            type: string
        reviews:
          type: array
          items:
            type: string 
        ownEvents:
          type: array
          items:
            type: string
        password:
          type: string
          pattern: '^(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).{8,32}$'
          example: 'Password1'
        rating:
          type: number
        image:
          type: string
        birthdate:
          type: string
          format: date
          example: '1990-01-15'
        interests:
          type: array
          items:
            type: string
            example: 'Culturales'
        _id:
          type: string
          example: '5f9e2b3b9d9d9d9d9d9d9d9d'
    Notification:
      type: object
      properties:
        sender:
          type: string
          required: true
        receiver:
          type: string
          required: true
        message:
          type: string
          required: true
        timestamp:
          type: string
          format: date-time
      example:
        sender: 'senderUserId'
        receiver: 'receiverUserId'
        message: 'Hello, this is a message.'
    Chat:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for a chat message.
        sender:
          type: string
          description: The ID of the sender of the chat message.
        receiver:
          type: string
          description: The ID of the receiver of the chat message.
        message:
          type: string
          description: The content of the chat message.
        viewed:
          type: boolean
          description: A boolean flag indicating whether the message has been viewed.
        timestamp:
          type: string
          format: date-time
          description: The timestamp of when the chat message was created.
      required:
        - sender
        - receiver
        - message

security:
  - BearerAuth: []

paths:
  /api/v1/user:
    put:
      summary: Update the current user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'hello@gmail.com'
                name:
                  type: string
                  minLength: 4
                  example: 'JohnDoe'
                password:
                  type: string
                  pattern: '^(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).{8,32}$'
                  example: 'Password1'
                birthdate:
                  type: string
                  format: date
                  example: '1990-01-15'
                image:
                  type: string
                  format: uri
                  example: 'https://example.com/image.jpg'
                interests:
                  type: array
                  items:
                    type: string
                    example: 'Culturales'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: An unexpected error occurred
  /api/v1/user/{userId}:
    get:
      summary: Get a specific user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/v1/event:
    get:
      summary: Get all events
      tags:
        - Events
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post: 
      summary: Create a new event
      tags:
        - Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              imgUrls: ['https://www.google.com/']
              title: 'Event title'
              description: 'Event description'
              place: 'Boedo'
              schedule: 12
              duration: 2
              category: Culturales
              price: 12
              link: 'https://www.google.com/'
              minAge: 12
              type: Virtual
              days: ['2004-12-20', '2004-12-21']
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/v1/event/{eventId}:
    get:
      summary: Get a specific event
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          description: ID of the event to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Update a specific event
      tags:
        - Events
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          description: ID of the event to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              imgUrls: ['https://www.google.com/']
              title: 'Event title'
              description: 'Event description'
              place: 'Event place'
              schedule: 12
              duration: 2
              category: Culturales
              price: 12
              link: 'https://www.google.com/'
              minAge: 12
              type: Virtual
              days: ['2004-12-20', '2004-12-21']
              faqs: [
                {
                  question: 'Some question?',
                  answer: 'Some answer.'
                }
              ]
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: An unexpected
    delete:
      summary: Delete a specific event
      tags:
        - Events
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          description: ID of the event to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/v1/auth/signup:
    post:
      summary: Sign up a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'hello@gmail.com'
                name:
                  type: string
                  minLength: 4
                  example: 'JohnDoe'
                password:
                  type: string
                  pattern: '^(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).{8,32}$'
                  example: 'Password1'
                birthdate:
                  type: string
                  format: date
                  example: '1990-01-15'
                image:
                  type: string
                  format: uri
                  example: 'https://example.com/image.jpg'
                interests:
                  type: array
                  items:
                    type: string
                    example: 'Culturales'
              required: 
                - email
                - name
                - password
                - birthdate
                - interests
      responses:
        '201':
          description: User signed up successfully
          headers:
            Set-Cookie:
              description: Cookie containing the 'session' token
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized

  /api/v1/auth/signin:
    post:
      summary: Sign in an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: 'user@example.com'
              password: 'Password1'
      responses:
        '200':
          description: User signed in successfully
          headers:
            Set-Cookie:
              description: Cookie containing the 'session' token
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /api/v1/auth/logout:
    get:
      summary: Log out the current user
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          headers:
            Set-Cookie:
              description: Empty 'session' cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized

  /api/v1/auth/me:
    get:
      summary: Get user information
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /api/v1/auth/google:
    get:
      summary: Initiate Google OAuth2 authentication
      tags:
        - Auth
      responses:
        '302':
          description: Redirect to Google for authentication

  /api/v1/auth/google/callback:
    get:
      summary: Handle Google OAuth2 callback
      tags:
        - Auth
      responses:
        '302':
          description: Redirect to the home page if successful, or to /auth/failure in case of failure
  /api/v1/notification/{userId}/{messageId}:
    delete:
      summary: Delete a specific notification
      parameters:
        - name: userId
          in: path
          description: ID of the user to whom the notification belongs
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: ID of the notification to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Notification deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
      tags:
        - Notifications
  /api/v1/chat:
    post:
      tags:
        - Chat
      summary: "Send Chat Message"
      description: "Send a chat message from the sender to the receiver."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              senderId:
                type: string
                description: "ID of the sender"
              receiverId:
                type: string
                description: "ID of the receiver"
              message:
                type: string
                description: "Chat message content"
      responses:
        201:
          description: "Chat Message Created"
          schema:
            type: object
            properties:
              newMessage:
                type: object
                description: "Details of the created chat message"
              message:
                type: string
                description: "Success message"
        400:
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"      
  /api/v1/chat/{receiverId}:
    get:
      tags:
        - Chat
      summary: "Get Chat Messages"
      description: "Retrieve chat messages for a given receiver."
      parameters:
        - name: receiverId
          in: path
          required: true
          type: string
          description: "The ID of the receiver."
      responses:
        200:
          description: "Successful response"
          schema:
            type: object
            properties:
              data:
                type: object
                description: "Chat conversations"
        404:
          description: "No conversations found"
          schema:
            type: object
            properties:
              data:
                type: string
                description: "Message indicating no conversations found"
        400:
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"
  /api/v1/chat/{receiverId}/{senderId}:
    put:
      tags:
        - Chat
      summary: "Set Chat Messages as Viewed"
      description: "Set chat messages from a sender as viewed by a specific user."
      parameters:
        - name: receiverId
          in: path
          required: true
          type: string
          description: "ID of the user viewing the messages."
        - name: senderId
          in: path
          required: true
          type: string
          description: "ID of the sender of the messages to be marked as viewed."
      responses:
        200:
          description: "Messages from 'user' marked as viewed"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Success message"
        400:
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message"
              error:
                type: string
                description: "Error type"
    
